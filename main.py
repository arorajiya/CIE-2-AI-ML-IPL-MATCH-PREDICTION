# -*- coding: utf-8 -*-
"""MAIN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ajMlmgGbnQnO0SiCvLuIReYYoUyLpK_F
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt

# Load data from the CSV file
df = pd.read_csv('ipl_matches.csv')

# Convert date to datetime
df['date'] = pd.to_datetime(df['date'])

# Step 1: Use separate LabelEncoders for each categorical column
team_encoder = LabelEncoder()
venue_encoder = LabelEncoder()
toss_winner_encoder = LabelEncoder()
toss_decision_encoder = LabelEncoder()
winner_encoder = LabelEncoder()

# Step 2: Encode categorical features
df['team1_encoded'] = team_encoder.fit_transform(df['team1'])
df['team2_encoded'] = team_encoder.transform(df['team2'])  # same encoder as team1
df['venue_encoded'] = venue_encoder.fit_transform(df['venue'])
df['toss_winner_encoded'] = toss_winner_encoder.fit_transform(df['toss_winner'])
df['toss_decision_encoded'] = toss_decision_encoder.fit_transform(df['toss_decision'])
df['winner_encoded'] = winner_encoder.fit_transform(df['winner'])

# Step 3: Prepare features and target variable
X = df[['team1_encoded', 'team2_encoded', 'venue_encoded', 'toss_winner_encoded', 'toss_decision_encoded']]
y = df['winner_encoded']

# Step 4: Split the data into training and testing sets (80% train, 20% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Create and train the Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 6: Make predictions on the test set
y_pred = model.predict(X_test)

# Step 7: Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")
print("\nClassification Report:")
print(classification_report(y_test, y_pred, target_names=winner_encoder.classes_))

# Step 8: Display feature importance
feature_importance = pd.DataFrame({'feature': X.columns, 'importance': model.feature_importances_})
feature_importance = feature_importance.sort_values('importance', ascending=False)
print("\nFeature Importance:")
print(feature_importance)

# Visualize feature importance
plt.figure(figsize=(10, 6))
plt.bar(feature_importance['feature'], feature_importance['importance'])
plt.title('Feature Importance in IPL Match Win Prediction')
plt.xlabel('Features')
plt.ylabel('Importance')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Step 9: Example prediction for a new match (handle unseen venues or teams)
new_match = pd.DataFrame({
    'team1_encoded': [team_encoder.transform(['Mumbai Indians'])[0]],
    'team2_encoded': [team_encoder.transform(['Chennai Super Kings'])[0]],
    'venue_encoded': [venue_encoder.transform(['Wankhede Stadium'])[0]],  # Use only seen venues
    'toss_winner_encoded': [team_encoder.transform(['Mumbai Indians'])[0]],
    'toss_decision_encoded': [toss_decision_encoder.transform(['bat'])[0]]
})

# Make prediction
prediction = model.predict(new_match)
predicted_winner = winner_encoder.inverse_transform(prediction)[0]
print(f"\nPredicted winner for Mumbai Indians vs Chennai Super Kings at Wankhede Stadium: {predicted_winner}")

# Step 10: Probability of each team winning
probabilities = model.predict_proba(new_match)[0]
for team, prob in zip(winner_encoder.classes_, probabilities):
    print(f"{team}: {prob:.2f}")